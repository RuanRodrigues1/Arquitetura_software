// NOME DO ARQUIVO: mips_processor.v
module mips_processor(
    input wire clock,
    input wire reset
);

    // Fios para conectar os componentes
    wire [31:0] pc_current, pc_next, pc_plus_4;
    wire [31:0] instruction;
    wire [31:0] read_data_1, read_data_2, sign_extended_immediate, alu_in_2;
    wire [31:0] alu_result, mem_read_data, write_back_data;
    wire [31:0] jump_address, branch_address, branch_address_offset;
    wire [4:0]  write_reg_addr, final_write_reg_addr;

    // Sinais de Controle
    wire        reg_dest, branch, mem_read, mem_to_reg, mem_write;
    wire        alu_src, reg_write, jump, jal_dest;
    wire [1:0]  alu_op;
    reg  [3:0]  alu_control; // Alterado para reg
    wire        zero_flag;
    wire        pc_src;
	 wire [31:0] pc_next_temp, pc_next_jal, data_to_reg_temp;

    // --- Estágio 1: Busca da Instrução ---
    assign pc_src = branch & zero_flag;
    assign branch_address = pc_plus_4 + branch_address_offset;
    assign pc_next_temp = pc_src ? branch_address : pc_plus_4;
    assign jump_address = {pc_plus_4[31:28], instruction[25:0], 2'b00};
	 assign pc_next = jump ? jump_address : pc_next_temp;

    PC pc_unit ( .clock(clock), .reset(reset), .next_PC(pc_next), .PC(pc_current) );
    somador_PC_4 pc_adder ( .PC(pc_current), .somador_out(pc_plus_4) );
    i_mem instruction_memory ( .pc_adress(pc_current), .inst_out(instruction) );

    // --- Estágio 2: Decodificação e Leitura de Registradores ---
    ctrl_corrigido control_unit (
        .instrucao(instruction), .RegDest(reg_dest), .Branch(branch), .MemRead(mem_read),
        .MemToReg(mem_to_reg), .ALUOp(alu_op), .MemWrite(mem_write), .ALUSrc(alu_src),
        .RegWrite(reg_write), .Jump(jump), .Jal_Dest(jal_dest)
    );

    mux2x1 reg_dest_mux( .entrada0(instruction[20:16]), .entrada1(instruction[15:11]), .seletor(reg_dest), .saida(write_reg_addr) );
    mux2x1 jal_dest_mux( .entrada0(write_reg_addr), .entrada1(5'b11111), .seletor(jal_dest), .saida(final_write_reg_addr) );

    regfile register_file (
        .clock(clock), .reset(reset), .RegWrite(reg_write), .ReadAddr1(instruction[25:21]),
        .ReadAddr2(instruction[20:16]), .WriteAddr(final_write_reg_addr), .WriteData(write_back_data),
        .ReadData1(read_data_1), .ReadData2(read_data_2)
    );
    extensor_de_sinal sign_extender ( .imediato(instruction[15:0]), .extensor_out(sign_extended_immediate) );

    // --- Estágio 3: Execução (ULA) ---
    always @(*) begin
        if (alu_op == 2'b10) // Tipo-R
            case(instruction[5:0])
                6'b100000: alu_control = 4'b0010; // ADD
                6'b100010: alu_control = 4'b0110; // SUB
                6'b100100: alu_control = 4'b0000; // AND
                6'b100101: alu_control = 4'b0001; // OR
                6'b101010: alu_control = 4'b0111; // SLT
                default:   alu_control = 4'bxxxx;
            endcase
        else if (alu_op == 2'b00) // lw, sw, addi
            alu_control = 4'b0010; // ADD
        else if (alu_op == 2'b01) // beq
            alu_control = 4'b0110; // SUB
        else
            alu_control = 4'bxxxx;
    end

    mux2x1 alu_input_mux ( .entrada0(read_data_2), .entrada1(sign_extended_immediate), .seletor(alu_src), .saida(alu_in_2) );
    ULA alu ( .in1(read_data_1), .in2(alu_in_2), .OP(alu_control), .result(alu_result), .Zero_flag(zero_flag) );
    shift_left_2 shift_left_branch ( .endereco_in(sign_extended_immediate), .endereco_out(branch_address_offset) );

    // --- Estágio 4: Acesso à Memória ---
    d_mem_corrigida data_memory (
        .clock(clock), .MemWrite(mem_write), .MemRead(mem_read),
        .Address(alu_result), .WriteData(read_data_2), .ReadData(mem_read_data)
    );

    // --- Estágio 5: Escrita de Volta ---
	assign pc_next_jal = pc_plus_4;
    mux2x1 write_back_mux( .entrada0(alu_result), .entrada1(mem_read_data), .seletor(mem_to_reg), .saida(data_to_reg_temp) );
	mux2x1 jal_mux( .entrada0(data_to_reg_temp), .entrada1(pc_next_jal), .seletor(jal_dest), .saida(write_back_data) );

endmodule